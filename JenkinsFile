pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/jayeshredij/TaskMasterPro.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=TaskMaster \
                    -Dsonar.projectName=TaskMaster -Dsonar.java.binaries=target '''
               }
            }
        }
        
        stage('Build Application') {
            steps {
                sh 'mvn package'
            }
        }
        
        stage('Publish to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings', maven: 'maven3', traceability: true) {
                    sh 'mvn deploy'
               }
            }
        }
        stage('Build & Tag Dockerimage') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          sh 'docker build -t jayeshredij/taskmaster:latest .'
                   }
                }
            }
        }
        stage('Scan docker image by trivy') {
            steps {
                sh 'trivy image --format table -o image-report.html jayeshredij/taskmaster:latest'
            }
        }
        stage('Push Dockerimage') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          sh 'docker push jayeshredij/taskmaster:latest '
                   }
                }
            }
        }
        
        stage('deploy to K8s') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' jayesh-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://E25CD21D38D489230C4B77EADD0B4FFE.gr7.ap-south-1.eks.amazonaws.com') {
                     sh 'kubectl apply -f deployment-service.yml -n webapps'
                     sleep 30
               }
            }
        }
        stage('verify the deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' jayesh-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://E25CD21D38D489230C4B77EADD0B4FFE.gr7.ap-south-1.eks.amazonaws.com') {
                     sh 'kubectl get pods -n webapps'
                     sh 'kubectl get svc -n webapps'
               }
            }
        }
    }
}
